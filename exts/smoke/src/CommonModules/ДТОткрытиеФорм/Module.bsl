//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	Настройки = ЮТДымовыеТесты.ПараметрыВидаДымовогоТеста(КлючНастройки());
	
	Если НЕ Настройки.Использовать Тогда
		Возврат;
	КонецЕсли;
	
	ЮТТесты.ВТранзакции().УдалениеТестовыхДанных();
	
	ДеревоТестов = ДТОткрытиеФормСлужебныйВызовСервера.ТипыТестов();
	ПараметрыТиповТестов = ДТОткрытиеФормСлужебныйКлиентСервер.ПараметрыТиповТестов();
	
	Для Каждого КоллекцияМетаданных Из ДеревоТестов Цикл
	
		ЮТТесты.ДобавитьТестовыйНабор(КоллекцияМетаданных.ИмяКоллекции);
		
		Для Каждого Объект Из КоллекцияМетаданных.Объекты Цикл
			
			ОписаниеОбъекта = Новый Структура("Тип, Имя", КоллекцияМетаданных.Тип, Объект.Имя);
			
			Для Каждого ТипТеста Из Объект.ТипыТестов Цикл
				
				ЗарегистрироватьТест(ОписаниеОбъекта, ТипТеста, ПараметрыТиповТестов[ТипТеста].Представление);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючНастройки()
	
	Возврат "ОткрытиеФорм";
	
КонецФункции

Процедура ЗарегистрироватьТест(ОписаниеОбъекта, ТипТеста, Представление)
	
	ИмяМетода = СтрШаблон("ОткрытьФорму_%1", ТипТеста);
	ПредставлениеТеста = СтрШаблон("%1.%2. Форма %3", ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя, Представление);
	
	ЮТТесты.ДобавитьКлиентскийТест(ИмяМетода, ПредставлениеТеста, ЮТКоллекции.ЗначениеВМассиве(ТипТеста))
		.СПараметрами(ОписаниеОбъекта);
	
КонецПроцедуры

#Область Тесты

Процедура ОткрытьФорму_Новый(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаОбъекта");
	
КонецПроцедуры

Процедура ОткрытьФорму_НоваяГруппа(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаГруппы");
	
КонецПроцедуры

Процедура ОткрытьФорму_Существующий(ОписаниеОбъекта) Экспорт
	
	Параметры = Новый Структура("Отбор", Новый Структура("ЭтоГруппа", Ложь));
	Ключ = ЮТДымовыеТесты.СлучайныйЭлемент(ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		ЮТест.Пропустить(СтрШаблон("Не удалось найти существующий объект для типа `%1.%2`", ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя));
	КонецЕсли;
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаОбъекта", Ключ);
	
КонецПроцедуры

Процедура ОткрытьФорму_СуществующаяГруппа(ОписаниеОбъекта) Экспорт
	
	Параметры = Новый Структура("Отбор", Новый Структура("ЭтоГруппа", Истина));
	Ключ = ЮТДымовыеТесты.СлучайныйЭлемент(ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		ЮТест.Пропустить(СтрШаблон("Не удалось найти существующую группы для типа `%1.%2`", ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя));
	КонецЕсли;
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаОбъекта", Ключ);
	
КонецПроцедуры

Процедура ОткрытьФорму_Скопированный(ОписаниеОбъекта) Экспорт
	
	Параметры = Новый Структура("Отбор", Новый Структура("ЭтоГруппа", Ложь));
	Ключ = ЮТДымовыеТесты.СлучайныйЭлемент(ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		ЮТест.Пропустить(СтрШаблон("Не удалось найти существующий объект для типа `%1.%2`", ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя));
	КонецЕсли;
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаОбъекта", Ключ);
	
КонецПроцедуры

Процедура ОткрытьФорму_СкопированнаяГруппа(ОписаниеОбъекта) Экспорт
	
	Параметры = Новый Структура("Отбор", Новый Структура("ЭтоГруппа", Истина));
	Ключ = ЮТДымовыеТесты.СлучайныйЭлемент(ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		ЮТест.Пропустить(СтрШаблон("Не удалось найти существующую группы для типа `%1.%2`", ОписаниеОбъекта.Тип, ОписаниеОбъекта.Имя));
	КонецЕсли;
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаОбъекта", Ключ);
	
КонецПроцедуры

Процедура ОткрытьФорму_Список(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаСписка");
	
КонецПроцедуры

Процедура ОткрытьФорму_Выбор(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаВыбора");
	
КонецПроцедуры

Процедура ОткрытьФорму_ВыборГруппы(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаВыбораГруппы");
	
КонецПроцедуры

Процедура ОткрытьФорму_Основная(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "Форма");
	
КонецПроцедуры

Процедура ОткрытьФорму_Настройки(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаНастроек");
	
КонецПроцедуры

Процедура ОткрытьФорму_Варианты(ОписаниеОбъекта) Экспорт
	
	ОткрытьЗакрытьФорму(ОписаниеОбъекта, "ФормаВарианта");
	
КонецПроцедуры

Процедура ОткрытьЗакрытьФорму(ОбъектМетаданных, ИмяФормы, Ключ = Неопределено)
	
	ПолноеИмяФормы = СтрШаблон("%1.%2.%3", ОбъектМетаданных.Тип, ОбъектМетаданных.Имя, ИмяФормы);
	ЮТЛогирование.Отладка("Открытие формы: " + ПолноеИмяФормы);
	ЮТЛогирование.Отладка("	Ключ(ссылка): " + Ключ);
	
	Параметры = Новый Структура("Ключ", Ключ);
	
	Попытка
		//@skip-check use-non-recommended-method
		Форма = ПолучитьФорму(ПолноеИмяФормы, Параметры, , Новый УникальныйИдентификатор); // BSLLS:GetFormMethod-off
	Исключение
		ЮТРегистрацияОшибок.ДобавитьПояснениеОшибки("Ошибка получения (создания) формы");
		ВызватьИсключение
	КонецПопытки;
	
	ЮТест.ОжидаетЧто(Форма)
		.НеРавно(Неопределено, "Не удалось получить форму");
	
	ЭтоУправляемаяФорма = ЭтоУправляемаяФорма(Форма);
	ЮТЛогирование.Отладка("	Тип формы: " + Формат(ЭтоУправляемаяФорма, "БЛ='Обычная форма'; БИ='Управляемая форма';"));
	
	Попытка
		Форма.Открыть();
	Исключение
		ЮТРегистрацияОшибок.ДобавитьПояснениеОшибки("Ошибка открытия формы");
		ВызватьИсключение
	КонецПопытки;
	
	ЮТест.ОжидаетЧто(Форма.Открыта(), "Не удалось открыть форму")
		.ЭтоИстина();
	
	Попытка
		Если ЭтоУправляемаяФорма Тогда
			Форма.ОбновитьОтображениеДанных();
		Иначе
			Форма.Обновить();
		КонецЕсли;
	Исключение
		ЮТРегистрацияОшибок.ДобавитьПояснениеОшибки("Ошибка обновления данных формы");
		ВызватьИсключение;
	КонецПопытки;
	
	Форма.Модифицированность = Ложь;
	Попытка
		Форма.Закрыть();
	Исключение
		ЮТРегистрацияОшибок.ДобавитьПояснениеОшибки("Ошибка закрытия формы");
		ВызватьИсключение;
	КонецПопытки;
	
	ЮТест.ОжидаетЧто(Форма.Открыта(), "Не удалось закрыть форму")
		.ЭтоЛожь();
	
КонецПроцедуры

Функция ЭтоУправляемаяФорма(Форма)
	
	Возврат ТипЗнч(Форма) = Тип("УправляемаяФорма");
	
КонецФункции

#КонецОбласти

#Область Контекст

Функция Настройки() Экспорт
	
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаНастройки());
	
КонецФункции

Функция ИмяКонтекстаНастройки()
	
	Возврат "ДымовыеТесты_ОткрытиеФорм";
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаНастроек

Функция ЗагрузитьНастройки(ЗагружаемаяНастройка)
	
	НастройкиТестов = НастройкиПоУмолчанию();
	Путь = "ДымовыеТесты.ОткрытиеФорм";
	ТипыТестов = ДТОткрытиеФормСлужебныйКлиентСервер.ТипыТестов();
	
	Для Каждого Элемент Из ЗагружаемаяНастройка Цикл
		
		ЭтоБазоваяНастройка = ЮТДымовыеТестыСлужебныйКлиентСервер.ПрочитанБазовыеЭлементНастройки(НастройкиТестов,
																								  Элемент.Ключ,
																								  Элемент.Значение,
																								  Путь);
		
		Если ЭтоБазоваяНастройка Тогда
			Продолжить;
		ИначеЕсли ТипыТестов.Свойство(Элемент.Ключ) Тогда
			Настройка = НастройкаТипаТеста(Элемент.Значение, Путь + "." + Элемент.Ключ);
			НастройкиТестов.Вставить(Элемент.Ключ, Настройка);
		ИначеЕсли ЮТМетаданные.ТипыМетаданных().Свойство(Элемент.Ключ) Тогда
			ПрочитатьНастройкиТипаМетаданных(НастройкиТестов, Элемент.Ключ, Элемент.Значение, Путь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НастройкиТестов;
	
КонецФункции

Процедура ПрочитатьНастройкиТипаМетаданных(НастройкиТестов, ИмяНастройки, ЗначениеНастройки, Путь)
	
	НастройкиТипаМетаданных = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	ТипМетаданного = ЮТМетаданные.ТипыМетаданных()[ИмяНастройки];
	
	ЗагружаемаяНастройка = НормализованноеЗначениеНастрйоки(ЗначениеНастройки);
	ТипыТестов = ДТОткрытиеФормСлужебныйКлиентСервер.ТипыТестов();
	
	Для Каждого Элемент Из ЗагружаемаяНастройка Цикл
		
		ЭтоБазоваяНастройка = ЮТДымовыеТестыСлужебныйКлиентСервер.ПрочитанБазовыеЭлементНастройки(НастройкиТипаМетаданных,
																								  Элемент.Ключ,
																								  Элемент.Значение,
																								  Путь);
		
		Если ЭтоБазоваяНастройка Тогда
			Продолжить;
		ИначеЕсли ТипыТестов.Свойство(Элемент.Ключ) Тогда
			Настройка = НастройкаТипаТеста(Элемент.Значение, Путь + "." + Элемент.Ключ);
			НастройкиТипаМетаданных.Вставить(Элемент.Ключ, Настройка);
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиТестов.Вставить(ТипМетаданного.Имя, НастройкиТипаМетаданных);
	
КонецПроцедуры

Функция НастройкаТипаТеста(ЗначениеНастройки, Путь)
	
	ЗагружаемаяНастройка = НормализованноеЗначениеНастрйоки(ЗначениеНастройки);
	Настройка = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	
	Для Каждого Элемент Из ЗагружаемаяНастройка Цикл
		
		ЮТДымовыеТестыСлужебныйКлиентСервер.ПрочитанБазовыеЭлементНастройки(Настройка,
																			Элемент.Ключ,
																			Элемент.Значение,
																			Путь);
	КонецЦикла;
	
	Возврат Настройка;
	
КонецФункции

Функция НормализованноеЗначениеНастрйоки(Настройка)
	
	Если ТипЗнч(Настройка) = Тип("Булево") Тогда
		Возврат Новый Структура("Использовать", Настройка);
	Иначе
		Возврат Настройка;
	КонецЕсли;
	
КонецФункции

Функция НастройкиПоУмолчанию()
	
	Настройки = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	Настройки.Использовать = Ложь;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
