//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	Настройки = Настройки();
	
	Если НЕ Настройки.Использовать Тогда
		Возврат;
	КонецЕсли;
	
	ЮТТесты.ВТранзакции().УдалениеТестовыхДанных();
	
	КоллекцииМетаданных = СтрРазделить("Справочник, Документ", ", ", Ложь);
	ВладельцыФорм = ЮТДымовыеТестыСлужебныйВызовСервера.Формы(КоллекцииМетаданных, ОтборМетаданных(Настройки));
	
	ТекущийТипОбъекта = Неопределено;
	
	Для Каждого ВладелецФорм Из ВладельцыФорм Цикл
		
		НаборыИсключений = Новый Массив;
		Если ТекущийТипОбъекта <> ВладелецФорм.Тип Тогда
			ТекущийТипОбъекта = ВладелецФорм.Тип;
			ЮТТесты.ДобавитьТестовыйНабор(ТекущийТипОбъекта);
		КонецЕсли;
		
		ОписаниеОбъектаМетаданных = Новый Структура("Тип, Имя", ВладелецФорм.Тип, ВладелецФорм.Имя);
		
		Для Каждого ОписаниеФормы Из ВладелецФорм.Формы Цикл
			
			ЗарегистрироватьТестыФормы(ОписаниеОбъектаМетаданных, ОписаниеФормы, Настройки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтборМетаданных(Настройки)
	
	Отбор = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	ТипыМетаданных = ЮТМетаданные.ТипыМетаданных();
	Отбор.Исключения = Настройки.Исключения;
	
	Для Каждого Элемент Из Настройки Цикл
		
		Если ТипыМетаданных.Свойство(Элемент.Ключ) Тогда
			ОтборТипаМетаданных = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
			ОтборТипаМетаданных.Использовать = Элемент.Значение.Использовать;
			ОтборТипаМетаданных.Исключения = Элемент.Значение.Исключения;
			
			Отбор.Вставить(Элемент.Ключ, ОтборТипаМетаданных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

Процедура Инициализация(ПараметрыЗапуска) Экспорт
	
	ЗагружаемыеНастройки = ЮТДымовыеТестыСлужебныйКлиентСервер.ЗагружаемаяНастройкаДымовогоТеста(ПараметрыЗапуска, "ОткрытиеФорм");
	Настройки = ЗагрузитьНастройки(ЗагружаемыеНастройки);
	
	ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста(ИмяКонтекстаНастройки(), Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьТестыФормы(ОписаниеОбъектаМетаданных, ОписаниеФормы, Настройки)
	
	ТипыТестов = ТипыТестов();
	
	ОписаниеФормы.Вставить("Владелец", ОписаниеОбъектаМетаданных);
	ОписаниеФормы.Вставить("ТипФормы");
	
	Если ОписаниеФормы.ЭтоФормаОбъекта И ОписаниеФормы.ЭтоФормаГруппы Тогда
		
		ОписаниеФормы.ТипФормы = "ФормаГруппы";
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Новый, "новой группы");
		
	ИначеЕсли ОписаниеФормы.ЭтоФормаОбъекта Тогда
		
		ОписаниеФормы.ТипФормы = "ФормаОбъекта";
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Новый, "нового объекта");
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Существующий, "существующего объекта");
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Скопированный, "скопированного объекта");
		
	ИначеЕсли ОписаниеФормы.ЭтоФормаВыбора И ОписаниеФормы.ЭтоФормаГруппы Тогда
		
		ОписаниеФормы.ТипФормы = "ФормаВыбораГруппы";
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Выбор, "выбора группы");
		
	ИначеЕсли ОписаниеФормы.ЭтоФормаВыбора Тогда
		
		ОписаниеФормы.ТипФормы = "ФормаВыбора";
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Выбор, "выбора");
		
	ИначеЕсли ОписаниеФормы.ЭтоФормаСписка Тогда
		
		ОписаниеФормы.ТипФормы = "ФормаСписка";
		ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипыТестов.Список, "списка");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИсключитьТипТеста(Настройки, ТипМетаданного, ТипТеста)
	
	НастройкаТипаТеста = Неопределено;
	НастройкаТипаМетаданных = Неопределено;
	
	Возврат (Настройки.Свойство(ТипТеста, НастройкаТипаТеста) И НЕ НастройкаТипаТеста.Использовать)
		Или (Настройки.Свойство(ТипМетаданного, НастройкаТипаМетаданных)
			И НастройкаТипаМетаданных.Свойство(ТипТеста, НастройкаТипаТеста) 
			И НЕ НастройкаТипаТеста.Использовать);
	
КонецФункции

Функция ТестПодходитПодИсключения(Настройки, ОписаниеФормы, ТипТеста)
	
	НастройкаТипаМетаданных = Неопределено;
	НастройкаТипаТеста = Неопределено;
	Если Настройки.Свойство(ОписаниеФормы.Владелец.Тип, НастройкаТипаМетаданных) Тогда
		НастройкаТипаМетаданных.Свойство(ТипТеста, НастройкаТипаТеста);
	КонецЕсли;
	
	Возврат НастройкаТипаТеста <> Неопределено И 
			ЮТДымовыеТестыСлужебныйКлиентСервер.ПодходитПодИсключения(ОписаниеФормы.Владелец.Имя, НастройкаТипаТеста.Исключения);
	
КонецФункции

Процедура ЗарегистрироватьТест(Настройки, ОписаниеФормы, ТипТеста, Представление)
	
	Владелец = ОписаниеФормы.Владелец;
	Если ИсключитьТипТеста(Настройки, Владелец.Тип, ТипТеста) Или ТестПодходитПодИсключения(Настройки, ОписаниеФормы, ТипТеста) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетода = СтрШаблон("Открыть%1_%2", ОписаниеФормы.ТипФормы, ТипТеста);
	ПредставлениеТеста = СтрШаблон("Открытие формы %1: %2.%3", Представление, Владелец.Тип, Владелец.Имя);
	
	ЮТТесты.ДобавитьКлиентскийТест(ИмяМетода, ПредставлениеТеста, ЮТКоллекции.ЗначениеВМассиве(ОписаниеФормы.ТипФормы, ТипТеста))
		.СПараметрами(Владелец);
	
КонецПроцедуры

#Область Тесты

Процедура ОткрытьФормаОбъекта_Новый(ОбъектМетаданных) Экспорт
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаОбъекта");
	
КонецПроцедуры

Процедура ОткрытьФормаОбъекта_Существующий(ОбъектМетаданных) Экспорт
	
	Ключ = ЮТДымовыеТестыСлужебныйВызовСервера.СлучайныйЭлемент(ОбъектМетаданных.Тип, ОбъектМетаданных.Имя);
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		ЮТест.Пропустить(СтрШаблон("Не удалось найти существующий объект для типа `%1.%2`", ОбъектМетаданных.Тип, ОбъектМетаданных.Имя));
	КонецЕсли;
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаОбъекта", Ключ);
	
КонецПроцедуры

Процедура ОткрытьФормаОбъекта_Скопированный(ОбъектМетаданных) Экспорт
	
	Ключ = ЮТДымовыеТестыСлужебныйВызовСервера.СлучайныйЭлемент(ОбъектМетаданных.Тип, ОбъектМетаданных.Имя);
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		ЮТест.Пропустить(СтрШаблон("Не удалось найти существующий объект для типа `%1.%2`", ОбъектМетаданных.Тип, ОбъектМетаданных.Имя));
	КонецЕсли;
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаОбъекта", Ключ);
	
КонецПроцедуры

Процедура ОткрытьФормаГруппы_Группа(ОбъектМетаданных) Экспорт
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаГруппы");
	
КонецПроцедуры

Процедура ОткрытьФормаВыбора_Выбор(ОбъектМетаданных) Экспорт
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаВыбора");
	
КонецПроцедуры

Процедура ОткрытьФормаВыбораГруппы_ВыборГруппы(ОбъектМетаданных) Экспорт
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаВыбораГруппы");
	
КонецПроцедуры

Процедура ОткрытьФормаСписка_Список(ОбъектМетаданных) Экспорт
	
	ОткрытьЗакрытьФорму(ОбъектМетаданных, "ФормаСписка");
	
КонецПроцедуры

Процедура ОткрытьЗакрытьФорму(ОбъектМетаданных, ИмяФормы, Ключ = Неопределено) 
	
	ПолноеИмяФормы = СтрШаблон("%1.%2.%3", ОбъектМетаданных.Тип, ОбъектМетаданных.Имя, ИмяФормы);
	ЮТЛогирование.Отладка("Открытие формы: " + ПолноеИмяФормы);
	ЮТЛогирование.Отладка("Ключ: " + Ключ);
	
	Параметры = Новый Структура("Ключ", Ключ);
	
	Попытка
	//@skip-check use-non-recommended-method
	Форма = ПолучитьФорму(ПолноеИмяФормы, Параметры, , Новый УникальныйИдентификатор); // BSLLS:GetFormMethod-off
	Исключение
		ЮТЛогирование.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение
	КонецПопытки;
	
	Если Форма = Неопределено Тогда
		ВызватьИсключение "Не удалось получить форму";
	КонецЕсли;
	
	ЭтоУправляемаяФорма = ЭтоУправляемаяФорма(Форма);
	ЮТЛогирование.Отладка("Тип формы: " + Формат(ЭтоУправляемаяФорма, "БЛ='Обычная форма'; БИ='Управляемая форма';"));
	
	Попытка
		Форма.Открыть();
	Исключение
		ЮТЛогирование.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение
	КонецПопытки;
	
	Если Форма.Открыта() Тогда
		Если ЭтоУправляемаяФорма Тогда
			Форма.ОбновитьОтображениеДанных();
		Иначе
			Форма.Обновить();
		КонецЕсли;
		
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		
		Если Форма.Открыта() Тогда
			ВызватьИсключение "Не удалось закрыть форму";
		КонецЕсли;
	Иначе
		ВызватьИсключение "Не удалось открыть форму";
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоУправляемаяФорма(Форма)
	
	Возврат ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения");
	
КонецФункции

#КонецОбласти

#Область Контекст

Функция Настройки() Экспорт
	
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаНастройки());
	
КонецФункции

Функция ИмяКонтекстаНастройки()
	
	Возврат "ДымовыеТесты_ОткрытиеФорм";
	
КонецФункции


#КонецОбласти

#Область ЗагрузкаНастроек

Функция ЗагрузитьНастройки(ЗагружаемаяНастройка)
	
	НастройкиТестов = НастройкиПоУмолчанию();
	Путь = "ДымовыеТесты.ОткрытиеФорм";
	ТипыТестов = ТипыТестов();
	
	Для Каждого Элемент Из ЗагружаемаяНастройка Цикл
		
		ЭтоБазоваяНастройка = ЮТДымовыеТестыСлужебныйКлиентСервер.ПрочитанБазовыеЭлементНастройки(НастройкиТестов,
																								  Элемент.Ключ,
																								  Элемент.Значение,
																								  Путь);
		
		Если ЭтоБазоваяНастройка Тогда
			Продолжить;
		ИначеЕсли ТипыТестов.Свойство(Элемент.Ключ) Тогда 
			Настройка = НастройкаТипаТеста(Элемент.Значение, Путь + "." + Элемент.Ключ);
			НастройкиТестов.Вставить(Элемент.Ключ, Настройка);
		ИначеЕсли ЮТМетаданные.ТипыМетаданных().Свойство(Элемент.Ключ) Тогда 
			ПрочитатьНастройкиТипаМетаданных(НастройкиТестов, Элемент.Ключ, Элемент.Значение, Путь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НастройкиТестов;
	
КонецФункции

Процедура ПрочитатьНастройкиТипаМетаданных(НастройкиТестов, ИмяНастройки, ЗначениеНастройки, Путь)
	
	НастройкиТипаМетаданных = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	ТипМетаданного = ЮТМетаданные.ТипыМетаданных()[ИмяНастройки];
	
	ЗагружаемаяНастройка = НормализованноеЗначениеНастрйоки(ЗначениеНастройки);
	ТипыТестов = ТипыТестов();
	
	Для Каждого Элемент Из ЗагружаемаяНастройка Цикл
		
		ЭтоБазоваяНастройка = ЮТДымовыеТестыСлужебныйКлиентСервер.ПрочитанБазовыеЭлементНастройки(НастройкиТипаМетаданных,
																								  Элемент.Ключ,
																								  Элемент.Значение,
																								  Путь);
		
		Если ЭтоБазоваяНастройка Тогда
			Продолжить;
		ИначеЕсли ТипыТестов.Свойство(Элемент.Ключ) Тогда 
			Настройка = НастройкаТипаТеста(Элемент.Значение, Путь + "." + Элемент.Ключ);
			НастройкиТипаМетаданных.Вставить(Элемент.Ключ, Настройка);
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиТестов.Вставить(ТипМетаданного.Имя, НастройкиТипаМетаданных);
	
КонецПроцедуры

Функция НастройкаТипаТеста(ЗначениеНастройки, Путь)
	
	ЗагружаемаяНастройка = НормализованноеЗначениеНастрйоки(ЗначениеНастройки);
	Настройка = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	
	Для Каждого Элемент Из ЗагружаемаяНастройка Цикл
		
		ЮТДымовыеТестыСлужебныйКлиентСервер.ПрочитанБазовыеЭлементНастройки(Настройка,
																			Элемент.Ключ,
																			Элемент.Значение,
																			Путь);
	КонецЦикла;
	
	Возврат Настройка;
	
КонецФункции

Функция НормализованноеЗначениеНастрйоки(Настройка)
	
	Если ТипЗнч(Настройка) = Тип("Булево") Тогда
		Возврат Новый Структура("Использовать", Настройка);
	Иначе
		Возврат Настройка;
	КонецЕсли;
	
КонецФункции

Функция ТипыТестов()
	
	Типы = Новый Структура;
	Типы.Вставить("Новый", "Новый");
	Типы.Вставить("Существующий", "Существующий");
	Типы.Вставить("Скопированный", "Скопированный");
	Типы.Вставить("Список", "Список");
	Типы.Вставить("Выбор", "Выбор");
	
	Возврат Типы;
	
КонецФункции

Функция НастройкиПоУмолчанию()
	
	Настройки = ЮТДымовыеТесты.БазовоеОписаниеЭлементаНастройки();
	Настройки.Использовать = Ложь;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
