//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПодключитсяКСерверу(ПараметрыПодключения) Экспорт

	Обработчики = Новый ОбработчикиWebSocketКлиентСоединения("ПодключениеКСерверуОбработчикОткрытияСоединения",
		"ПодключениеКСерверуОбработчикПолученияСообщения",
		"ПодключениеКСерверуОбработчикОшибки",
		"ПодключениеКСерверуОбработчикЗакрытияСоединения",
		ЭтотОбъект);
	
	Сокет = WebSocketКлиентСоединения.ОткрытьСоединение("yaxunit-rpc", ПараметрыПодключения.АдресСервера, Обработчики);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВнешниеКоманды

Процедура ПодключениеКСерверуОбработчикОткрытияСоединения(Соединение) Экспорт
	
	ПоказатьОповещениеПользователя("Подключено");
	
	Сообщение = НовоеСообщение("hello", Новый Структура("protocolVersion, key", "1.0.0", "test"));
	Соединение.ОтправитьСообщение(ЮТОбщий.СтрокаJSON(Сообщение, Ложь, Истина));
	
КонецПроцедуры

Процедура ПодключениеКСерверуОбработчикПолученияСообщения(Соединение, Сообщение) Экспорт
	
	ПоказатьОповещениеПользователя("Получено сообщение: ", , Сообщение);
	
	ДанныеСообщение = ЮТОбщий.ЗначениеИзJSON(Сообщение);
	
	ТипСообщения = ДанныеСообщение.type;
	
	Если СтрСравнить(ТипСообщения, "runTest") = 0 Тогда
		ЗапуститьТест(ДанныеСообщение, Соединение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключениеКСерверуОбработчикОшибки(Соединение, КодОшибки, Описание) Экспорт
	
КонецПроцедуры

Процедура ПодключениеКСерверуОбработчикЗакрытияСоединения(Соединение, КодЗакрытия) Экспорт
	
	ПоказатьОповещениеПользователя("Подключение закрыто");
	
КонецПроцедуры

Функция НовоеСообщение(Тип, Данные, Идентификатор = 0)
	
	Возврат Новый Структура("type, data, id", Тип, Данные, Идентификатор);
	
КонецФункции

Процедура ЗапуститьТест(Сообщение, Соединение)
	
	Данные = Сообщение.data;
	ОписаниеМодуля = ЮТИсполнительСлужебныйКлиент.ОписаниеВременногоМодуля();
	ОписаниеМодуля.Текст = Данные.module;
	ОписаниеМодуля.КлиентУправляемое = Данные.client;
	ОписаниеМодуля.КлиентОбычное = Данные.ordinaryClient;
	ОписаниеМодуля.Сервер = Данные.server;
	
	Если ЗначениеЗаполнено(Данные.method) Тогда
		ИменаМетодов = ЮТКоллекции.ЗначениеВМассиве(Данные.method);
	Иначе
		ИменаМетодов = Неопределено;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеВыполненияТестов", ЭтотОбъект, Новый Структура("Соединение, id", Соединение, Сообщение.id));
	ЮТИсполнительСлужебныйКлиент.ВыполнитьТестыВременногоМодуля(ЮТПараметрыЗапускаСлужебный.ПараметрыТестированияПоУмолчанию(),
																ОписаниеМодуля,
																ИменаМетодов,
																ОбработчикЗавершения);
	
КонецПроцедуры

Процедура ПослеВыполненияТестов(Результат, ДополнительныеПараметры) Экспорт

	Сообщение = НовоеСообщение("report", Отчет(Результат), ДополнительныеПараметры.id);
	
	ДополнительныеПараметры.Соединение.ОтправитьСообщение(ЮТОбщий.СтрокаJSON(Сообщение, Ложь, Истина));
	
КонецПроцедуры

Функция Отчет(Результат)
	
	Ответ = Новый Массив;
	
	Номер = 1;
	Для Каждого Набор Из Результат[0].НаборыТестов Цикл
		
		Ответ.Добавить(ЮТОтчетJUnitСлужебный.ОписаниеНабора(Неопределено, Набор, Номер));
		Номер = Номер + 1;
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти
