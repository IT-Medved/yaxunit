//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция Настройки() Экспорт
	
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаНастройки());
	
КонецФункции

Функция ИсключитьТест(КлючТеста) Экспорт
	
	Настройки = Настройки();
	
	Если Настройки = Неопределено Или Не Настройки.Использовать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементНастройки = Настройки;
	НаборыИсключений = Новый Массив;
	Исключить = Ложь;
	
	Для Каждого Ключ Из ЮТСтроки.РазделитьСтроку(КлючТеста, ".") Цикл
		
		Если ЭлементНастройки <> Неопределено И ЗначениеЗаполнено(ЭлементНастройки.Исключения) Тогда
			НаборыИсключений.Добавить(ЭлементНастройки.Исключения);
		КонецЕсли;
		
		ЭлементНастройки = ЮТКоллекции.ЗначениеСтруктуры(Настройки.Подчиненные, Ключ);
		
		Если ЭлементНастройки = Неопределено И НЕ ЗначениеЗаполнено(НаборыИсключений) Тогда
			Прервать;
		ИначеЕсли ЭлементНастройки <> Неопределено И НЕ ЭлементНастройки.Использовать Тогда
			Исключить = Истина;
			Прервать;
		КонецЕсли;
		
		Если ПодходитПодНаборыИсключений(Ключ, НаборыИсключений) Тогда
			Исключить = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Исключить;
	
КонецФункции

Функция ЗагружаемаяНастройкаДымовогоТеста(ПараметрыЗапуска, Ключ) Экспорт
	
	Настройка = Новый Структура("Использовать", Ложь);
	
	ДымовыеТесты = ЮТКоллекции.ЗначениеСтруктуры(ПараметрыЗапуска, "ДымовыеТесты");
	Настройка.Использовать = ИспользованиеНастройки(ДымовыеТесты, Ложь);
	
	Если НЕ Настройка.Использовать Или ТипЗнч(ДымовыеТесты) = Тип("Булево") Тогда
		Возврат Настройка;
	КонецЕсли;
	
	НастройкиТеста = ЮТКоллекции.ЗначениеСтруктуры(ДымовыеТесты, Ключ);
	
	Использовать = ИспользованиеНастройки(НастройкиТеста, Ложь);
	Если ТипЗнч(НастройкиТеста) = Тип("Структура") Тогда
		НастройкиТеста.Вставить("Использовать", Использовать);
		Возврат НастройкиТеста;
	КонецЕсли;
	
	Настройка.Использовать = Использовать;
	Возврат Настройка;
	
КонецФункции

Функция ИспользованиеНастройки(Настройка, ЗначениеПоУмолчанию)
	
	Если НЕ ЗначениеЗаполнено(Настройка) Или Настройка = Ложь Тогда
		Использовать = ЗначениеПоУмолчанию;
	ИначеЕсли Настройка = Истина Тогда
		Использовать = Истина;
	Иначе
		Использовать = ЮТКоллекции.ЗначениеСтруктуры(Настройка, "Использовать", ЗначениеПоУмолчанию);
	КонецЕсли;
	
	Возврат Использовать;
	
КонецФункции

Функция ПрочитанБазовыеЭлементНастройки(Настройки, Ключ, Значение, Путь) Экспорт
	
	Если СтрСравнить(Ключ, "Использовать") = 0 Тогда
		Настройки.Использовать = Значение;
	ИначеЕсли СтрСравнить(Ключ, "Исключения") = 0 Тогда
		ПрочитатьИсключения(Настройки, Значение, Путь);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьНаборИсключений(НаборыИсключений, ЭлементНастройки) Экспорт
	
	Если ЭлементНастройки <> Неопределено И ЗначениеЗаполнено(ЭлементНастройки.Исключения) Тогда
		НаборыИсключений.Добавить(ЭлементНастройки.Исключения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Контекст

Функция ИмяКонтекстаНастройки()
	
	Возврат "НастройкиДымовыхТестов";
	
КонецФункции

#КонецОбласти

Функция ПодходитПодНаборыИсключений(Ключ, НаборыИсключений) Экспорт
	
	Для Каждого Набор Из НаборыИсключений Цикл
		
		Если ПодходитПодИсключения(Ключ, Набор) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодходитПодИсключения(Ключ, НаборИсключений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НаборИсключений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ОписаниеИсключения Из НаборИсключений Цикл
		
		Если ЮТСтроки.СоответсвуетШаблону(Ключ, ОписаниеИсключения) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПрочитатьИсключения(Настройки, Исключения, Путь)
	
	Если ТипЗнч(Исключения) = Тип("Строка") Тогда
		Настройки.Исключения.Добавить(Исключения);
	ИначеЕсли ТипЗнч(Исключения) = Тип("Массив") Тогда
		Настройки.Исключения = Исключения;
	ИначеЕсли Исключения <> Неопределено Тогда
		ВызватьИсключение СтрШаблон("Некорретный тип элемента настроек `%1.Исключения`. Допустимо: Строка или Массив из Строка", Путь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
