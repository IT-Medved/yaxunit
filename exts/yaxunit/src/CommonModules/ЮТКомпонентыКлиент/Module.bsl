//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ТихаяУстановкаКомпонент() Экспорт
	
	Успешно = Истина;
#Если Клиент И НЕ ВебКлиент Тогда
	
	Компоненты = ЮТОбщий.ЗначениеВМассиве(ЮТКомпоненты.ОписаниеКомпонентыПауза());
	
	Для Каждого Компонента Из Компоненты Цикл
		ТихаяУстановкаВнешнейКомпоненты(Компонента.ИмяМакета);
	КонецЦикла;
#КонецЕсли
	
	Возврат Успешно;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ТихаяУстановкаВнешнейКомпоненты(ИмяМакета)
	
	Информация = Новый СистемнаяИнформация();
	ОперационнаяСистема = Неопределено;
	Архитектура = Неопределено;
	
	Linux = "Linux";
	Windows = "Windows";
	MacOS = "MacOS";
	x86 = "i386";
	x64 = "x86_64";
	
	ТипКлиентскойПлатформы = Информация.ТипПлатформы;
	
	Если ТипКлиентскойПлатформы = ТипПлатформы.Linux_x86 Тогда
		ОперационнаяСистема = Linux;
		Архитектура = x86;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ОперационнаяСистема = Linux;
		Архитектура = x64;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.Windows_x86 Тогда
		ОперационнаяСистема = Windows;
		Архитектура = x86;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ОперационнаяСистема = Windows;
		Архитектура = x64;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.MacOS_x86 Тогда
		ОперационнаяСистема = MacOS;
		Архитектура = x86;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		ОперационнаяСистема = MacOS;
		Архитектура = x64;
	Иначе
		ВызватьИсключение "Неподдерживаемый тип платформы";
	КонецЕсли;
	
	ДанныеФайла = ЮТКомпонентыВызовСервера.ФайлКомпоненты(ИмяМакета, ОперационнаяСистема, Архитектура);
	
	Путь = РабочийКаталогДанныхПользователя();
	КорневойКаталог = ЮТФайлы.ОбъединитьПути(Путь, "..", "..", "..");
	
	КаталогКомпонент = ЮТФайлы.ОбъединитьПути(КорневойКаталог, "ExtCompT");
	ФайлРеестра = ЮТФайлы.ОбъединитьПути(КаталогКомпонент, "registry.xml");
	ФайлКомпоненты = ЮТФайлы.ОбъединитьПути(КаталогКомпонент, ДанныеФайла.ИмяФайла);
	
	ДанныеФайла.Данные.Записать(ФайлКомпоненты);
	ЗаписатьВРеестр(ФайлРеестра, ДанныеФайла.ИмяФайла);
	
КонецПроцедуры

Процедура ЗаписатьВРеестр(ФайлРеестра, ИмяФайла)
	
	Данные = Новый ДвоичныеДанные(ФайлРеестра);
	Текст = ПолучитьСтрокуИзДвоичныхДанных(Данные);
	
	Если СтрНайти(Текст, "<component") = 0 Тогда // Файл пустой
		Текст = СтрШаблон("<?xml version=""1.0"" encoding=""UTF-8""?>
						  |<registry xmlns=""http://v8.1c.ru/8.2/addin/registry"">
						  |	<component path=""%1"" type=""native""/>
						  |</registry>", ИмяФайла);
	ИначеЕсли СтрНайти(Текст, СтрШаблон("path=""%1""", ИмяФайла)) <> 0 Тогда // Компонента уже зарегистрированна
		Возврат;
	Иначе // Добавляем компоненту
		Запись = СтрШаблон("	<component path=""%1"" type=""native""/>", ИмяФайла);
		Текст = СтрЗаменить(Текст, "</registry>", Запись + Символы.ПС + "</registry>");
	КонецЕсли;
	
	Данные = ПолучитьДвоичныеДанныеИзСтроки(Текст, КодировкаТекста.UTF8, Истина);
	Данные.Записать(ФайлРеестра);
	
КонецПроцедуры

#КонецОбласти
