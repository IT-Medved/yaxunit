//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Данные = ПолучитьОбщийМакет("ЮТMonacoEditor");
//	ЧтениеZip = Новый ЧтениеZipФайла(Данные.ОткрытьПотокДляЧтения);
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], ИмяВременногоФайла);
//	Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
//	УдалитьФайлы(ИмяВременногоФайла);
//	
//	EditorURL = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/" + ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	EditorURL = "http://localhost:5173/";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура EditorURLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЮТРеактивныйКлиент.ОбработатьСообщение(ЭтотОбъект, Элементы.EditorURL, ДанныеСобытия, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ОбработатьСообщение", ЭтотОбъект)
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьСообщение(Сообщение, Контекст) Экспорт
	
	Если СтрСравнить(Сообщение.ИмяСобытия, "runTest") = 0 Тогда
		ЗапуститьТесты(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТесты(Сообщение)
	
	ПараметрыИсполнения = ЮТИсполнительСлужебныйКлиент.ПараметрыИсполнения();
	ПараметрыИсполнения.АргументыЗапуска = ЮТПараметрыЗапускаСлужебный.ПараметрыТестированияПоУмолчанию();
	ЮТИсполнительСлужебныйКлиент.ОбработчикИнициализация(, ПараметрыИсполнения);
	Сценарии = ЮТКоллекции.ЗначениеВМассиве(Сценарии(Сообщение.Значение.method, Сообщение.Значение.module));
	
	ЮТИсполнительСлужебныйКлиент.ОбработчикСформироватьИсполняемыеТесты(Сценарии, ПараметрыИсполнения);
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыполненияТестирования", ЭтотОбъект, Сообщение);
	ЮТИсполнительСлужебныйКлиент.ВыполнитьТестовыеМодули(ПараметрыИсполнения.АргументыЗапуска, ПараметрыИсполнения.ИсполняемыеТестовыеМодули, Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияТестирования(Результат, Сообщение) Экспорт
	
	Ответ = Новый Структура("tests, errors", Новый Массив, Новый Массив);
	
	Для Каждого Набор Из Результат[0].НаборыТестов Цикл
		
		Для Каждого ОписаниеОшибки Из Набор.Ошибки Цикл
			
			Если ЗначениеЗаполнено(ОписаниеОшибки.Стек) Тогда
				Ответ.errors.Добавить(ОписаниеОшибки.Стек);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Тест Из Набор.Тесты Цикл
		
			ОписаниеТеста = Новый Структура;
			ОписаниеТеста.Вставить("status", Тест.Статус);
			ОписаниеТеста.Вставить("present", Тест.Имя);
			ОписаниеТеста.Вставить("method", Тест.Метод);
			ОписаниеТеста.Вставить("duration", Тест.Длительность);
			ОписаниеТеста.Вставить("message", "");
			
			Ответ.tests.Добавить(ОписаниеТеста);
			
			Для Каждого ОписаниеОшибки Из Тест.Ошибки Цикл
				
				Если ЗначениеЗаполнено(ОписаниеОшибки.Стек) Тогда
					Ответ.errors.Добавить(ОписаниеОшибки.Стек);
				КонецЕсли;
				
				ОписаниеТеста.message = ОписаниеТеста.message + Символы.ПС + ОписаниеОшибки.Сообщение;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЮТРеактивныйКлиент.ОтправитьОтвет(Элементы.EditorURL, Сообщение, Ответ);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстРедактора()
	
	Возврат ЮТРеактивныйКлиент.ГлобальноеСвойство(Элементы.EditorURL, "bslEditor").getText();
	
КонецФункции

&НаСервереБезКонтекста
Функция Сценарии(Знач Метод, Знач ТекстМодуля)
	
	ИмяОбработки = ИмяВременнойОбработки(ТекстМодуля);
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат СценарииОбработки(Обработка, Метод);
	
КонецФункции

&НаСервереБезКонтекста
Функция СценарииОбработки(Обработка, Метод)
	
	МетаданныеОбработки = ЮТМетаданныеСлужебныйВызовСервера.МетаданныеОбработки(Обработка, Истина);
	ЮТФильтрацияСлужебный.УстановитьКонтекст(Новый Структура("filter", Новый Структура));//("tests", ЮТКоллекции.ЗначениеВМассиве(Метод))));
	
	Возврат ЮТЧитательСлужебный.ИсполняемыеСценарииОбъекта(Обработка, МетаданныеОбработки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяВременнойОбработки(ТекстМодуля)
	
	ИмяФайлаОбработки = ЮТВнешниеОбработкиСлужебныйСервер.СкомпилироватьВнешнююОбработку(ТекстМодуля);
	Данные = Новый ДвоичныеДанные(ИмяФайлаОбработки);
	УдалитьФайлы(ИмяФайлаОбработки);
	
	Возврат ВнешниеОбработки.Подключить(ПоместитьВоВременноеХранилище(Данные));
	
КонецФункции
#КонецОбласти
