//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ВТранзакции()
		.УдалениеТестовыхДанных()
		.ДобавитьТест("Удалить")
		.ДобавитьТест("ВариантыПараметров")
		.ДобавитьТест("СоздатьГруппу")
		.ДобавитьСерверныйТест("СтруктурыТабличногоДокумента")
		.ДобавитьСерверныйТест("ТаблицаЗначенийИзТабличногоДокумента")
		.ДобавитьСерверныйТест("ТаблицаЗначенийИзТаблицыMarkDown")
		.ДобавитьТест("СлучайныйИдентификатор")
	;
		
КонецПроцедуры

Процедура Удалить() Экспорт
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(ЮТест.Данные().СоздатьЭлемент("Справочники.Банки"));
	Ссылки.Добавить(ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара"));
	Ссылки.Добавить(
		ЮТест.Данные()
			.КонструкторОбъекта("Документы.ПриходТовара")
			.Провести()
	);
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		СсылкаСуществует = ПомощникТестированияВызовСервера.СсылкаСуществует(Ссылка);
		ЮТест.ОжидаетЧто(СсылкаСуществует, "Ссылка на несуществующий объект").ЭтоИстина();
		
	КонецЦикла;
	
	ЮТТестовыеДанные.Удалить(Ссылки);
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		СсылкаСуществует = ПомощникТестированияВызовСервера.СсылкаСуществует(Ссылка);
		ЮТест.ОжидаетЧто(СсылкаСуществует, "Объект не удален по ссылке").ЭтоЛожь();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВариантыПараметров() Экспорт
	
	Ключи = "Числа, Строки";
	БазоваяСтруктура = Новый Структура(Ключи);
	Значения = Новый Структура(Ключи, ЮТОбщий.ЗначениеВМассиве(1, 2), ЮТОбщий.ЗначениеВМассиве("1", "2"));
	
	Результат = ЮТест.Данные().ВариантыПараметров(БазоваяСтруктура, Значения);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(7)
		.Элемент(0).Равно(БазоваяСтруктура)
		.Элемент(1).Равно(Новый Структура(Ключи, 1))
		.Элемент(2).Равно(Новый Структура(Ключи, 1, "1"))
		.Элемент(3).Равно(Новый Структура(Ключи, 1, "2"))
		.Элемент(5).Равно(Новый Структура(Ключи, 2, "1"))
		.Элемент(6).Равно(Новый Структура(Ключи, 2, "2"));
	
КонецПроцедуры

Процедура СоздатьГруппу() Экспорт
	
	Группа = ЮТест.Данные().СоздатьГруппу("Справочники.Товары");
	
	ЭтоГруппа = ЮТЗапросы.ЗначениеРеквизита(Группа, "ЭтоГруппа");
	ЮТест.ОжидаетЧто(ЭтоГруппа).ЭтоИстина();
	
КонецПроцедуры

Процедура СлучайныйИдентификатор() Экспорт
	
	Проверка = Новый Структура();
	
	Для Инд = 1 По 100 Цикл
		
		Идентификатор = ЮТест.Данные().СлучайныйИдентификатор(Инд);
		
		ЮТест.ОжидаетЧто(Проверка)
			.Метод("Вставить").Параметр(Идентификатор)
			.НеВыбрасываетИсключение(, "Сформирован не валидный идентификатор: " + Идентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

#Если Сервер Тогда
	
Процедура СтруктурыТабличногоДокумента() Экспорт
	
	ТабличныйДокумент = ПолучитьОбщийМакет("ЮТ_МакетТестовыхДанных");
	
	МассивДанных = ЮТест.Данные().СтруктурыТабличногоДокумента(ТабличныйДокумент, 1, 8);
	
	ЮТест.ОжидаетЧто(МассивДанных)
		.ИмеетДлину(3)
		.Свойство("[0]").ИмеетТип("Структура")
		.Свойство("[1]").ИмеетТип("Структура")
		.Свойство("[2]").ИмеетТип("Структура")
		.Свойство("[0].Товар").Равно("Товар 1")
		.Свойство("[0].Цена").Равно("100.55")
		.Свойство("[0].Количество").Равно("1")
		.Свойство("[0].Сумма").Равно("100.55")
		.Свойство("[1].Товар").Равно("Товар 2")
		.Свойство("[1].Цена").Равно("1500.2")
		.Свойство("[1].Количество").Равно("1")
		.Свойство("[1].Сумма").Равно("1500.2")
		.Свойство("[2].Товар").Равно("Услуга")
		.Свойство("[2].Цена").Равно("1000000")
		.Свойство("[2].Количество").Равно("1")
		.Свойство("[2].Сумма").Равно("1000000")
	;
	
КонецПроцедуры

Процедура ТаблицаЗначенийИзТабличногоДокумента() Экспорт
	
	// Подготовка тестового окружения
	
	ТабличныйДокумент = ПолучитьОбщийМакет("ЮТ_МакетТестовыхДанных");
	
	ИсходныеДанные = ТабличныйДокумент.ПолучитьОбласть(2, 1, 5, 11);
	
	ОписанияТипов = Новый Соответствие;
	ОписанияТипов.Вставить("Товар", Новый ОписаниеТипов("СправочникСсылка.Товары"));
	ОписанияТипов.Вставить("Цена", Новый ОписаниеТипов("Число"));
	ОписанияТипов.Вставить("Количество", Новый ОписаниеТипов("Число"));
	
	КэшЗначений = Неопределено;
	
	Поставщик = ЮТест.Данные().СоздатьЭлемент(Справочники.Контрагенты, "Поставщик");
	
	ЗаменяемыеЗначения = Новый Соответствие;
	ЗаменяемыеЗначения.Вставить("Поставщик 1", Поставщик);
	
	// Вызов тестируемого сценария
	
	ТаблицаРезультатов = ЮТест.Данные().ТаблицаЗначенийИзТабличногоДокумента(
		ИсходныеДанные,
		ОписанияТипов,
		КэшЗначений,
		ЗаменяемыеЗначения
	);
	
	// Проверка поведения и результатов
	
	Ютест.ОжидаетЧто(ТаблицаРезультатов)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(3)
		.Свойство("[0].Товар.Поставщик").Равно(Поставщик)
		.Свойство("[0].Товар.Артикул").Равно("Артикул 1")
		.Свойство("[0].Товар.Вид").Равно(Перечисления.ВидыТоваров.Товар)
		.Свойство("[0].Товар.Описание").Заполнено()
		.Свойство("[0].Количество").Равно(1)
		.Свойство("[0].Цена").Равно(100.55)
		.Свойство("[1].Товар.Поставщик").Заполнено().НеРавно(Поставщик)
		.Свойство("[1].Товар.Артикул").Равно("Артикул 2")
		.Свойство("[1].Товар.Вид").Равно(Перечисления.ВидыТоваров.Товар)
		.Свойство("[1].Товар.Описание").НеЗаполнено()
		.Свойство("[1].Количество").Равно(1)
		.Свойство("[1].Цена").Равно(1500.2)
		.Свойство("[2].Товар.Поставщик").НеЗаполнено()
		.Свойство("[2].Товар.Артикул").Равно("Артикул 3")
		.Свойство("[2].Товар.Вид").Равно(Перечисления.ВидыТоваров.Услуга)
		.Свойство("[2].Товар.Описание").Заполнено()
		.Свойство("[2].Количество").Равно(1)
		.Свойство("[2].Цена").Равно(1000000)
	;
		
КонецПроцедуры

Процедура ТаблицаЗначенийИзТаблицыMarkDown() Экспорт
	
	// Подготовка тестового окружения
	
	ИсходныеДанные =
	"| Товар   | Цена  | Количество | Сумма |
	||---------|-------|------------|-------|
	|| Товар 1 | 100   | 1          | 100   |
	|| Товар 2 | 2 000 | 1          | 2000  |
	|| Услуга  | 300,9 | 1          | 300,9 |
	|";

	ОписанияТипов = Новый Соответствие;
	ОписанияТипов.Вставить("Товар", Новый ОписаниеТипов("СправочникСсылка.Товары"));
	ОписанияТипов.Вставить("Цена", Новый ОписаниеТипов("Число"));
	ОписанияТипов.Вставить("Количество", Новый ОписаниеТипов("Число"));
	ОписанияТипов.Вставить("Сумма", Новый ОписаниеТипов("Число"));
	
	// Вызов тестируемого сценария
	
	ТаблицаРезультатов = ЮТест.Данные().ТаблицаЗначенийИзТаблицыMarkDown(
		ИсходныеДанные,
		ОписанияТипов
	);
	
	// Проверка поведения и результатов
	
	Ютест.ОжидаетЧто(ТаблицаРезультатов)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(3)
		.Свойство("[0].Товар.Наименование").Равно("Товар 1")
		.Свойство("[0].Количество").Равно(1)
		.Свойство("[0].Цена").Равно(100)
		.Свойство("[0].Сумма").Равно(100)
		.Свойство("[1].Товар.Наименование").Равно("Товар 2")
		.Свойство("[1].Количество").Равно(1)
		.Свойство("[1].Цена").Равно(2000)
		.Свойство("[1].Сумма").Равно(2000)
		.Свойство("[2].Товар.Наименование").Равно("Услуга")
		.Свойство("[2].Количество").Равно(1)
		.Свойство("[2].Цена").Равно(300.9)
		.Свойство("[2].Сумма").Равно(300.9)
	;
		
КонецПроцедуры
		
#КонецЕсли
	
#КонецОбласти
