//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ВТранзакции()
		.ДобавитьТест("ДобавитьСтроку")
		.ДобавитьТест("Установить")
		.ДобавитьТест("УстановитьРеквизиты")
		.ДобавитьТест("Фикция")
		.ДобавитьТест("ФикцияРеквизитов")
		.ДобавитьТест("ФикцияОбязательныхПолей")
		.ДобавитьТест("Инициализировать")
		.ДобавитьТест("Записать")
	;
	
КонецПроцедуры

Процедура ДобавитьСтроку() Экспорт
	
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "Продажи");
	
	ЮТест.ОжидаетЧто(Конструктор)
		.Метод("ДобавитьСтроку").НеВыбрасываетИсключение();
	
	Данные = Конструктор.Данные();
	ЮТест.ОжидаетЧто(Данные)
		.Заполнено()
		.ИмеетТип("Массив")
		.ИмеетДлину(1);
	
КонецПроцедуры

Процедура Установить() Экспорт
	
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
	Покупатель = ЮТест.Данные().СоздатьЭлемент("Справочники.Контрагенты");
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "Продажи");
	
	ЮТест.ОжидаетЧто(Конструктор)
		.Метод("Установить", ЮТКоллекции.ЗначениеВМассиве("Покупатель", Покупатель)).ВыбрасываетИсключение("Сначала необходимо добавить строку");
	
	Конструктор
		.ДобавитьСтроку()
		.Установить("Покупатель", Покупатель);
	Данные = Конструктор.ДанныеСтроки();
	ЮТест.ОжидаетЧто(Данные)
		.Заполнено()
		.Свойство("Покупатель").Равно(Покупатель);
	
КонецПроцедуры

Процедура УстановитьРеквизиты() Экспорт
	
	// Создаем документ и контрагента
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
	Контрагент = ЮТест.Данные().СоздатьЭлемент("Справочники.Контрагенты");
	
	// Инициализируем конструктор движений
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "Продажи");
	
	// Добавляем строку и устанавливаем реквизиты
	ЗначенияРеквизитов = Новый Структура("Покупатель, Сумма", Контрагент, 1000);
	Конструктор.ДобавитьСтроку().УстановитьРеквизиты(ЗначенияРеквизитов);
	
	// Получаем данные строки
	Данные = Конструктор.ДанныеСтроки();
	
	// Проверяем, что реквизиты установлены корректно
	ЮТест.ОжидаетЧто(Данные)
		.Заполнено("Данные конструктора должны быть заполнены структурой")
		.ИмеетТип("Структура")
		.Свойство("Покупатель").Равно(Контрагент, "Контрагент должен совпадать")
		.Свойство("Сумма").Равно(1000, "Сумма должна быть равна 1000");
	
КонецПроцедуры

Процедура Фикция() Экспорт
	
	// Создаем документ
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
	
	// Инициализируем конструктор движений
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "ТоварныеЗапасы");
	
	// Добавляем строку и устанавливаем фиктивное значение реквизита
	Конструктор.ДобавитьСтроку().Фикция("Товар");
	
	// Получаем данные строки
	Данные = Конструктор.ДанныеСтроки();
	
	// Проверяем, что реквизит "Номенклатура" заполнен
	ЮТест.ОжидаетЧто(Данные, "Данные строки должны быть заполнены")
		.Заполнено()
		.Свойство("Товар")
			.НеРавно(Неопределено, "Номенклатура должна быть заполнена");
	
	// Проверяем, что метод выбрасывает исключение
	МассивПараметров = ЮТКоллекции.ЗначениеВМассиве("НесуществующийРеквизит");
	ЮТест.ОжидаетЧто(Конструктор)
		.Метод("Фикция", МассивПараметров)
		.ВыбрасываетИсключение("`РегистрНакопления.ТоварныеЗапасы` не содержит реквизит `НесуществующийРеквизит`");
	
КонецПроцедуры

Процедура ФикцияРеквизитов() Экспорт
	
	// Создаем документ
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
	
	// Инициализируем конструктор движений
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "ТоварныеЗапасы");
	
	// Добавляем строку и устанавливаем фиктивные значения реквизитов
	Конструктор.ДобавитьСтроку().ФикцияРеквизитов("Товар, Склад, Количество");
	
	// Получаем данные строки
	Данные = Конструктор.ДанныеСтроки();
	
	// Проверяем, что все реквизиты заполнены
	ЮТест.ОжидаетЧто(Данные, "Данные строки должны быть заполнены")
		.Заполнено()
		.Свойство("Товар")
			.Заполнено("Товар должн быть заполнен")
		.Свойство("Склад")
			.Заполнено("Склад должен быть заполнен")
		.Свойство("Количество")
			.Заполнено("Количество должено быть заполнено");
	
	// Проверяем, что при указании несуществующих реквизитов выбрасывается исключение
	МассивПараметров = ЮТКоллекции.ЗначениеВМассиве("Несуществующий1");
	ЮТест.ОжидаетЧто(Конструктор)
		.Метод("ФикцияРеквизитов", МассивПараметров)
		.ВыбрасываетИсключение("`РегистрНакопления.ТоварныеЗапасы` не содержит реквизит `Несуществующий1`");
	
КонецПроцедуры

Процедура ФикцияОбязательныхПолей() Экспорт
	
	// Создаем документ
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
	
	// Инициализируем конструктор движений
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "ТоварныеЗапасы");
	
	// Добавляем строку и заполняем обязательные поля фиктивными значениями
	Конструктор.ДобавитьСтроку().ФикцияОбязательныхПолей();
	
	// Получаем данные строки
	Данные = Конструктор.ДанныеСтроки();
	
	// Получаем список обязательных полей из метаданных
	ОбязательныеПоля = ЮТКоллекции.ЗначениеВМассиве("Товар", "Склад");
	
	// Проверяем, что все обязательные поля заполнены
	Утверждение = ЮТест.ОжидаетЧто(Данные);
	Для Каждого Поле Из ОбязательныеПоля Цикл
		Утверждение.Свойство(Поле)
			.Заполнено();
	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	// Создаем документ
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
	
	Конструктор = Обработки.ЮТКонструкторДвижений.Создать();
	// Инициализируем конструктор движений
	Конструктор = ЮТест.Данные().КонструкторДвижений(Документ, "ТоварныеЗапасы");
	
	// Проверяем, что конструктор инициализирован
	ЮТест.ОжидаетЧто(Конструктор, "Конструктор должен быть инициализирован")
		.НеРавно(Неопределено);
	
	// Проверяем, что данные конструктора пусты
	Данные = Конструктор.Данные();
	ЮТест.ОжидаетЧто(Данные, "Данные конструктора должны быть пустым массивом")
		.ИмеетТип("Массив")
		.Равно(Новый Массив);
	
	ЮТест.ОжидаетЧто(ЮТест.Данные())
		.Метод("КонструкторДвижений", ЮТКоллекции.ЗначениеВМассиве(Документ, "НесуществующийРегистр"))
		.ВыбрасываетИсключение("Документ " + Документ + " не делает движений по регистру ""НесуществующийРегистр""");
	
КонецПроцедуры

Процедура Записать() Экспорт
	
	// Создаем документ
	Документ = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
	// Инициализируем конструктор движений
	ЮТест.Данные().КонструкторДвижений(Документ, "ТоварныеЗапасы")
		.ДобавитьСтроку()
		.ФикцияРеквизитов("Товар, Склад, Количество")
		.Записать();
	
	ЮТест.ОжидаетЧтоТаблицаБазы("РегистрНакопления.ТоварныеЗапасы")
		.СодержитЗаписи(ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(Документ));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
